1. Firstly, I read in the "untidy" txt file using 'read.table'. I then downloaded the packages tidyr and dplyr using the library() function.
2. Looking at the "dictionary", I noticed that two colums: 'playlist_genre' and 'playlist_subgenre' were missing. Instead, the observations i.e. rap, rock, latin, and r&b were made into variables and put into seperate columns. Considering that this goes against the principles of a tidy dataset, I used the function 'pivot_longer' to put them under one variable forming the 'playlist_genre' column. I then added a new variable forming the 'playlist_subgenre' column using the previous observations of the 'rap' column.
3. After doing so, I noticed several repeat rows due to the 'playlist_subgenre" column. This increased the observations from 1667 to 6668 making the data very "untidy". Hence, I removed the rows that were N/A in the column using the filter function, decreasing the observations back to its original number.  
4. I then relocated the playlist_genre and playlist_subgenre using the function 'relocate'. This moved the columns to it's preferred location to make it more consistent and tidy.
5. Finally, I substituted the typo in 'r.b' to 'r&b' using the mutate() and gsub() function.
6. I then noticed an inconsitent column 'zz_track_names' and used rename() to remove the typos, making it more tidy. 
7.I noticed that the 'danceability.energy' column contained two variables, violating the rule that each variable should form its own column. The function 'separate_wider_delim' was used to split the variables into their own respective columns: 'danceability' and 'energy'.
8. I noticed incosistenices in the 'track_album_release_date' column, where a typo resulted in '0.5' being used instead of the year '2020'. By using mutate() and gsub() function, I was able to fix this issue, resulting in a cleaner dataset.
9. Subsequently, I identified an undesired character 'Q' present in the 'mode' column. To address this issue, I utilized the mutate() function along with gsub() to eliminate the 'Q' from values within the 'mode' column. Following this, I applied as.numeric() to convert the modified values back into numerical format. The data is now cleaner and more consistent.
10. Following that, I rectified misspelled artist names within the 'track_artist' column using the mutate() and gsub() functions.
11.As per the 'dictionary', the 'instrumentalness' column values should not surpass 1.0. I observed inconsistencies where some values exceeded this threshold. Hence, I used the mutate() and ifelse() functions to create a new column , replacing values exceeding 1 with NA. Ensuring each variable resides in its dedicated column without numeric violations and maintaining consistent observations within rows enhances the dataset's tidiness, thereby improving its usability and interpretability.